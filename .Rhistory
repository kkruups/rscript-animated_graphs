str(jpnb.df$group)
head(jpnb.df$group)
jpnb.df$group
names(jpnb.df)
names(jpnb)
head(jpnb)
?lat.group
for (i in 8:19){
#retrieve Month column name
var<-colnames(jpnb.df)[i]
#specify dataset  ggplot(x=Long, y=Lat, by group))
p<-ggplot(jpnb.df, aes(long,lat, group=group))
#fill color based on preciptation data fill polygon color by precipitation data
+geom_polygon(aes_string(fill=var))+coord_equal()
#create polygon borders
# p<-p+geom_polygon(data=jpnb, aes(long,lat.group=group),fill=NA, colour="black")
p<-p+geom_polygon(data=jpnb, aes(long,lat),fill=NA, colour="black")
#Color Gradient legend
#p<-p+scale_fill_gradientn("Rainfall",limits=c(0,330),guide="legend", breaks=seq(0,330,30), colours=col)
p <- p + scale_fill_gradientn("Rainfall", limits=c(0,330), breaks = seq(0,330,30), colours=col) + guides(fill = guide_legend(reverse = TRUE))
p <- p + theme_bw() + ggtitle(var)
print(p)
ggsave(file=paste("rainr_",i,".png", sep=""))
}
for (i in 8:19){
#retrieve Month column name
var<-colnames(jpnb.df)[i]
#specify dataset  ggplot(x=Long, y=Lat, by group))
p<-ggplot(jpnb.df, aes(long,lat, group=group)) +geom_polygon(aes_string(fill=var))+coord_equal()
#fill color based on preciptation data fill polygon color by precipitation data
#create polygon borders
# p<-p+geom_polygon(data=jpnb, aes(long,lat.group=group),fill=NA, colour="black")
p<-p+geom_polygon(data=jpnb, aes(long,lat),fill=NA, colour="black")
#Color Gradient legend
#p<-p+scale_fill_gradientn("Rainfall",limits=c(0,330),guide="legend", breaks=seq(0,330,30), colours=col)
p <- p + scale_fill_gradientn("Rainfall", limits=c(0,330), breaks = seq(0,330,30), colours=col) + guides(fill = guide_legend(reverse = TRUE))
p <- p + theme_bw() + ggtitle(var)
print(p)
ggsave(file=paste("rainr_",i,".png", sep=""))
}
#Create file name vector
files = sprintf('rainr_%d.png', 8:19)
#create aninmated gif from png files using image magick
im.convert(files, output = 'r_rainfall.gif')
max(jpnb.df)
class(jpnb.df)
summarise(jpnb.df)
library(dplyr)
library(help="dplyr")
summarize(jpnb.df)
summarise(jpnb.df)
summarise(jpnb.df$July)
summarise(jpnb.df)
summarize(jpnb.df)
dplyr::summarize(jpnb.df)
dplyr::summarise(jpnb.df)
tally(jpnb.df)
quantile(jpnb.df)
apropos(".rs")
.rs.unloadPackage("dplyr")
search()
.rs.isPackageLoaded("dplyr")
head(jpnb.df)
head(jpnb.df)[,8:19]
rain.df <-jpnb.df[,8:19]
rain.df
tallY(rain.df)
class(rain.df)
tally(rain.df)
count(rain.df$January)
nrows(rain.df)
library("dplyr")
nrows(rain.df)
nrow("dplyr")
nrow("dplyr")
nrow("rain.df")
nrow(rain.df)
count(rain.df)
quantile(rain.df)
quantile(rain.df, na.rm=T)
for (i in 8:19){
#retrieve Month column name
var<-colnames(jpnb.df)[i]
#specify dataset  ggplot(x=Long, y=Lat, by group))
p<-ggplot(jpnb.df, aes(long,lat, group=group)) +
#fill color based on preciptation data fill polygon color by precipitation data
geom_polygon(aes_string(fill=var)) + coord_equal()
#create polygon borders
#Assume lat.group in original code wrong/typo, since jpnb has no group column
# p<-p+geom_polygon(data=jpnb, aes(long,lat.group=group),fill=NA, colour="black")
p <- p + geom_polygon(data = jpnb, aes(long,lat),fill = NA, colour="black")
#Color Gradient legend
#p<-p+scale_fill_gradientn("Rainfall",limits=c(0,330),guide="legend", breaks=seq(0,330,30), colours=col)
p <- p + scale_fill_gradientn("Rainfall", limits=c(0,500), breaks = seq(0,500,50), colours=col) + guides(fill = guide_legend(reverse = TRUE))
p <- p + theme_bw() + ggtitle(var)
print(p)
ggsave(file=paste("rainr_",i,".png", sep=""))
}
#Create file name vector
files = sprintf('rainr_%d.png', 8:19)
#create aninmated gif from png files using image magick
im.convert(files, output = 'r_rainfall.gif')
runif(100,20,50)
?runif
smoke
ids
smoke <- c(rep(c(1,0),3), 1, 0,1,1)
smoke
city <- c(rep(c("A","B"),4),"B","B")
city
gender <- c(rep("M",3), rep("F",7))
smoker_df <- data.frame(gender, city, smoke)
smoker_df
smoke_df[1:4]
smoke_df
smoker_df[1:4]
smoke_df[1:4,]
smoker_df[1:4,]
write.csv(smoker[1;4,], file="smoker_grp1.csv")
write.csv(smoker[1:4,], file="smoker_grp1.csv")
write.csv(smoker_df[1:4,], file="smoker_grp1.csv")
write.csv(smoker_df[5:7,], file="smoker_grp2.csv")
write.csv(smoker_df[8:10,], file="smoker_grp2.csv")
dir()
write.csv(smoker_df[8:10,], file="smoker_grp3.csv")
write.csv(smoker_df[5:7,], file="smoker_grp2.csv")
dir()
file.show("smoker_grp1.csv")
path <- list("smoker_grp1.csv", "smoker_grp2.csv", "smoker_grp3.csv")
df_list_in <- lapply(path, read.csv)
class(df_list_in)
df_list_in
df_list_in[[1]]
df_list_in[[2]]
df_list_in[[3]]
df_list_in$1
df_list_in$1
str(df_list_in)
df_list_in
df3 <- as.data.frame(df_list_in[[3]])
df3
df2 <- as.data.frame(df_list_in[[2]])
df1 <- as.data.frame(df_list_in[[1]])
df_all <- rbind(df1,df2,df3)
df1
df2
df3
df_all
df2 <- as.data.frame(df_list_in[[2]])
df2
df2 <- as.data.frame(df_list_in[[3]])
df_list_in
smoker
smoker_df
smoker_df
df_list_in
path <- list("smoker_grp1.csv", "smoker_grp2.csv", "smoker_grp3.csv")
df_list_in <- lapply(path, read.csv)
df_listin_in
df_list_in
?read.csv
path <- list("smoker_grp1.csv", "smoker_grp2.csv", "smoker_grp3.csv")
df_list_in <- lapply(path, read.csv(colClasses = c("numeric", "character", "character", "numeric")))
path <- list("smoker_grp1.csv", "smoker_grp2.csv", "smoker_grp3.csv")
df_list_in <- lapply(path, colClasses = c("numeric", "character", "character", "numeric"), read.csv())
path <- list("smoker_grp1.csv", "smoker_grp2.csv", "smoker_grp3.csv")
df_list_in <- lapply(path, colClasses = c("numeric", "character", "character", "numeric"), read.csv())
path <- list("smoker_grp1.csv, colClasses = c("numeric", "character", "character", "numeric")", "smoker_grp2.csv, colClasses = c("numeric", "character", "character", "numeric")", "smoker_grp3.csv, colClasses = c("numeric", "character", "character", "numeric")")
df_list_in <- lapply(path, , read.csv())
?lapply
path <- list(c("smoker_grp1.csv", colClasses = c("numeric", "character", "character", "numeric")),c("smoker_grp2.csv", colClasses = c("numeric", "character", "character", "numeric")), c("smoker_grp3.csv", colClasses = c("numeric", "character", "character", "numeric")))
df_list_in <- lapply(path, read.csv())
path <- list(c(file="smoker_grp1.csv", colClasses = c("numeric", "character", "character", "numeric")),c(file="smoker_grp2.csv", colClasses = c("numeric", "character", "character", "numeric")), c(file="smoker_grp3.csv", colClasses = c("numeric", "character", "character", "numeric")))
df_list_in <- lapply(path, read.csv())
path <- list(c(file="smoker_grp1.csv", colClasses = c("numeric", "character", "character", "numeric")), c(file = "smoker_grp2.csv", colClasses = c("numeric", "character", "character", "numeric")), c(file = "smoker_grp3.csv", colClasses = c("numeric", "character", "character", "numeric")))
df_list_in <- lapply(path, read.csv())
path <- list(c(file="smoker_grp1.csv", colClasses = c("numeric", "character", "character", "numeric")), c(file = "smoker_grp2.csv", colClasses = c("numeric", "character", "character", "numeric")), c(file = "smoker_grp3.csv", colClasses = c("numeric", "character", "character", "numeric")))
df_list_in <- lapply(path, read.csv())
path <- list(c(file= "smoker_grp1.csv", colClasses = c("numeric", "character", "character", "numeric")), c(file = "smoker_grp2.csv", colClasses = c("numeric", "character", "character", "numeric")), c(file = "smoker_grp3.csv", colClasses = c("numeric", "character", "character", "numeric")))
path
path <- list(c(file= "smoker_grp1.csv", colClasses = ("numeric", "character", "character", "numeric")), c(file = "smoker_grp2.csv", colClasses = ("numeric", "character", "character", "numeric")), c(file = "smoker_grp3.csv", colClasses = ("numeric", "character", "character", "numeric")))
path <- list(c(file= "smoker_grp1.csv", colClasses = (""numeric", "character", "character", "numeric"")), c(file = "smoker_grp2.csv", colClasses = (""numeric", "character", "character", "numeric"")), c(file = "smoker_grp3.csv", colClasses = ""numeric", "character", "character", "numeric"")))
path <- list( "smoker_grp1.csv","smoker_grp2.csv", "smoker_grp3.csv")
df_list_in <- lapply(path, read.csv(), colClasses = c("numeric", "character", "character", "numeric"))
path <- list( file="smoker_grp1.csv", file="smoker_grp2.csv", file="smoker_grp3.csv")
df_list_in <- lapply(path, read.csv(), colClasses = c("numeric", "character", "character", "numeric"))
path <- list( file="smoker_grp1.csv", file="smoker_grp2.csv", file="smoker_grp3.csv")
df_list_in <- lapply(path, read.csv(), colClasses = c("numeric", "character", "character", "numeric"))
path <- list( file="smoker_grp1.csv", file="smoker_grp2.csv", file="smoker_grp3.csv")
df_list_in <- lapply(path, read.csv, colClasses = c("numeric", "character", "character", "numeric"))
path <- list( file="smoker_grp1.csv", file="smoker_grp2.csv", file="smoker_grp3.csv")
df_list_in <- lapply(path, read.csv, colClasses = c("character", "character", "character", "numeric"))
df_list_in
df1 <- as.data.frame(df_list_in[[1]])
df1
df2 <- as.data.frame(df_list_in[[2]])
df2
df3 <- as.data.frame(df_list_in[[3]])
df3
df_all <- rbind(df1,df2,df3)
df_all
df_all <- df_all$X < NULL
df_all
df_all
df_all
df_all <- rbind(df1,df2,df3)
df_all
df_all$X <- NULL
df_all
df_list <- list (
df_1 = data.frame(x = 1:5, y = 5:1),
df_2 = data.frame(x = 6:10, y = 10:6),
df_3 = data.frame(x = 11:15, y = 15:11)
)
df_list
arrange_col <- function(dl)
{
n_col <- ncol(dl[[1]])
out_names <- names(dl[[1]])
out <- lapply(1:n_col, function(i, x) as.data.frame(lapply(x, '[[' , i = i)) , dl)
names(out) <- out_names
return(out)
}
arrange_col(df_list)
df_1
df_list$df_1
ac <-arrange_col(df_list)
ac
class(ac)
ac
df_list
df_list[[1]]
ncol(df_list[[1]])
names(df_list[[1]])
n_col <- ncol(df_list[[1]])
out_names <- names(df_list[[1]])
out_names
out <- lapply(1:n_col), function(i,x) as.data.frame(lapply(x, '[[', i=i)), dl)
out <- lapply(1:n_col, function(i,x) as.data.frame(lapply(x, '[[', i=i)), dl)
out <- lapply(1:n_col, function(i,x) as.data.frame(lapply(x, '[[', i=i)), df_list)
out
names(out)
names(out) <-out_names
out
return(out)
arrange_col(df_list)
df_list
?as.data.frame
out <- lapply(1:n_col, function(i,x) print(i)+ print(x) + as.data.frame(lapply(x, '[[', i=i)), df_list)
out <- lapply(1:n_col, function(i,x) print(i) print(x)  as.data.frame(lapply(x, '[[', i=i)), df_list)
out <- lapply(1:n_col, function(i,x) {print(i) print(x)  as.data.frame(lapply(x, '[[', i=i)), df_list)}
out <- lapply(1:n_col, function(i,x) print(i)\ print(x)\  as.data.frame(lapply(x, '[[', i=i)), df_list)
df_list[[1
df_list'[['1
lapply(df_list, '[[' , i=1)
lapply(df_list, '[[' , i=2)
df_list
df_list[[,1
lapply(df_list, '[[' , i=1)
class(lapply(df_list, '[[' , i=1))
df_list
class(lapply(df_list, '[[' , i=1))
lapply(df_list, '[[' , i=1)
out
out_names
lapply(df_list, '[[' , i=1)
tt <- as.data.frame(lapply(df_list, '[[' , i=1), dflist)
tt <- as.data.frame(lapply(df_list, '[[' , i=1), df_list)
tt <- as.data.frame(lapply(df_list, '[[' , i=1))
tt
tt <- as.data.frame(lapply(df_list, '[[' , i=1)), df_list )
df_list[[,1]]
df_list[[,1]]
df_list[[1]]
df_list[[,X]]
df_list[[]]
df_list
df_list[[,1]]
df_list[[1,]]
df_list[[1]]
df_list[[1,1]]
df_list[[,1
df_list[[1]]
df_list[[df_1,1]]
df_list[[df_1]]
df_list$df_1
df_list$df_1$x
df_list$df_2$x
df_list$df_3$x
df_list[[[,1]]]
df_list[[,1]]]
df_list[[,1]]
df_list[[, ,1]]
df_list[[,,1]]
df_list[[,1]]
df_list[[1]]
lapply(df_list, '[[', i=1)
df_list %%>%% '[[,1'
library(tidyr)
library(dplyr)
df_list %%>%% '[[,1'
df_list %%>%% [[,1
df_list %%>%% [[,1]]
df_list %%>%% [[,1]]
df_list[[,1
]]
str(df_list)
df_list$df_1[,1]
df_list$df_1[,2]
?lapply
doit <- function(i, x) {
print(i)
print(x)
as.data.frame(lapply(x, '[[' , i = i))
}
doit(1, df_list)
doit(2, df_list)
doit(2, df_list)
lapply(1:2, doit, df_list)
df_list
ac
ac$x
ac$x$df_1
df_list$df_1$x
df_list$df_1$y
out_names
?substr
df <- read.csv(text="
A,B,T,T,F
T,T,F,T,text1
A,T,NA,F,T",
header=FALSE, stringsAsFactors=FALSE)
df
df[,sapply(df,class) == "logical"] <-
sapply(df[,sapply(df,class) == "logical"],
function(i) substr(as.character(i),1,1))
df
ls()
smoker_df
save(smoker_df, "smoker_data.rds")
save(smoker_df, file="smoker_data.rds")
rm(smoker_df)
ls()
smoker_df
load( file="smoker_data.rds")
smoker_df
ls()
getwd()
save(c(jpnb, jpnb.df, jpnbf, jpnp, jpnpe), file="animated_graphsdata_jpn.rds")
save(jpnb, jpnb.df, jpnbf, jpnp, jpnpe, file="animated_graphsdata_jpn.rds")
rm(jpnb, jpnb.df, jpnbf, jpnp, jpnpe)
ls()
jpnb
load(file="animated_graphsdata_jpn.rds")
jpnb
dir(
)
library(ggutils)
install_github("jcheng5/ggutils")
install.packages("httpuv")
install_github("jcheng5/ggutils")
apropos("lib")
.libPaths()
.rs.defaultLibraryPath()
.rs.defaultLibraryPath("z:/R/win-library/3.2")
.rs.defaultLibraryPath()
.rs.defaultUserLibraryPath()
.rs.uniqueLibraryPaths()
?.libPaths()
.libPaths(c("z:/R/win-library/3.2", "c:/Program Files/R/R-3.2.4/library"))
.libPaths()
install_github("jcheng5/ggutils")
library(ggutils)
library(help="ggutils")
?ggzoom
ids <- factor(c("1.1", "2.1", "1.2", "2.2", "1.3", "2.3"))
values <- data.frame(
id = ids,
value = c(3, 3.1, 3.1, 3.2, 3.15, 3.5)
)
positions <- data.frame(
id = rep(ids, each = 4),
x = c(2, 1, 1.1, 2.2, 1, 0, 0.3, 1.1, 2.2, 1.1, 1.2, 2.5, 1.1, 0.3,
0.5, 1.2, 2.5, 1.2, 1.3, 2.7, 1.2, 0.5, 0.6, 1.3),
y = c(-0.5, 0, 1, 0.5, 0, 0.5, 1.5, 1, 0.5, 1, 2.1, 1.7, 1, 1.5,
2.2, 2.1, 1.7, 2.1, 3.2, 2.8, 2.1, 2.2, 3.3, 3.2)
)
# Currently we need to manually merge the two together
datapoly <- merge(values, positions, by=c("id"))
(p <- ggplot(datapoly, aes(x=x, y=y)) + geom_polygon(aes(fill=value, group=id)))
# Which seems like a lot of work, but then it's easy to add on
# other features in this coordinate system, e.g.:
stream <- data.frame(
x = cumsum(runif(50, max = 0.1)),
y = cumsum(runif(50,max = 0.1))
)
p + geom_line(data = stream, colour="grey30", size = 5)
ggzoom(p)
ids <- factor(c("1.1", "2.1", "1.2", "2.2", "1.3", "2.3"))
values <- data.frame(
id = ids,
value = c(3, 3.1, 3.1, 3.2, 3.15, 3.5)
)
positions <- data.frame(
id = rep(ids, each = 4),
x = c(2, 1, 1.1, 2.2, 1, 0, 0.3, 1.1, 2.2, 1.1, 1.2, 2.5, 1.1, 0.3,
0.5, 1.2, 2.5, 1.2, 1.3, 2.7, 1.2, 0.5, 0.6, 1.3),
y = c(-0.5, 0, 1, 0.5, 0, 0.5, 1.5, 1, 0.5, 1, 2.1, 1.7, 1, 1.5,
2.2, 2.1, 1.7, 2.1, 3.2, 2.8, 2.1, 2.2, 3.3, 3.2)
)
# Currently we need to manually merge the two together
datapoly <- merge(values, positions, by=c("id"))
(p <- ggplot(datapoly, aes(x=x, y=y)) + geom_polygon(aes(fill=value, group=id)))
# Which seems like a lot of work, but then it's easy to add on
# other features in this coordinate system, e.g.:
# stream <- data.frame(
#  x = cumsum(runif(50, max = 0.1)),
#  y = cumsum(runif(50,max = 0.1))
#)
#p + geom_line(data = stream, colour="grey30", size = 5)
ggzoom(p)
ids <- factor(c("1.1", "2.1", "1.2", "2.2", "1.3", "2.3"))
values <- data.frame(
id = ids,
value = c(3, 3.1, 3.1, 3.2, 3.15, 3.5)
)
positions <- data.frame(
id = rep(ids, each = 4),
x = c(2, 1, 1.1, 2.2, 1, 0, 0.3, 1.1, 2.2, 1.1, 1.2, 2.5, 1.1, 0.3,
0.5, 1.2, 2.5, 1.2, 1.3, 2.7, 1.2, 0.5, 0.6, 1.3),
y = c(-0.5, 0, 1, 0.5, 0, 0.5, 1.5, 1, 0.5, 1, 2.1, 1.7, 1, 1.5,
2.2, 2.1, 1.7, 2.1, 3.2, 2.8, 2.1, 2.2, 3.3, 3.2)
)
# Currently we need to manually merge the two together
datapoly <- merge(values, positions, by=c("id"))
(p <- ggplot(datapoly, aes(x=x, y=y)) + geom_polygon(aes(fill=value, group=id)))
# Which seems like a lot of work, but then it's easy to add on
# other features in this coordinate system, e.g.:
# stream <- data.frame(
#  x = cumsum(runif(50, max = 0.1)),
#  y = cumsum(runif(50,max = 0.1))
#)
#p + geom_line(data = stream, colour="grey30", size = 5)
ggzoom(p)
hello()
hello
?hello
hello()
hello()
examples(hello)
example(hello)
library(help="shiny")
example("renderPlot")
example(renderPlot)
ls()
search()
example(renderPlot)
example(runExample)
runexample("02_text")
runexample("02_text")
runexample(02_text)
runexample("02_text")
runexample("02_text")
runexample("02_text")
runExample("02_text")
runExample("02_text")
runExample("03_reactivity")
runExample("04_mpg")
runExample("05_sliders")
runExample("04_mpg")
runExample("06_tabsets")
paste('r', dist, '(', n, ')', sep='')
?paste
runExample("06_tabsets")
runExample("07_widgets")
runExample("08_html")
runExample("09_upload")
runExample("10_download")
setwd("C:/sandbox/r/tutorial/shiny")
runApp("hist")
datasets()
dataset()
apropos("dataset")
displayDataset()
displayDataset(faithful[,2])
apropos("data")
.rs.findWorkingData()
apropos("dataset")
?displayDataset
?datasets()
library(help="datasets")
head(mtcars)
runApp("hist")
runApp("hist")
?hist
hist
hist
runApp("hist")
runApp("hist", display.mode = "showcase" )
runApp('hist')
runApp('hist')
getwd()
setwd("C:/sandbox/r/tutorial/shiny/ui_tut_1")
setwd("C:/sandbox/r/tutorial/shiny/ui_tut_1")
getwd()
runApp("../ui_tut_1")
runApp('C:/sandbox/r/tutorial/shiny/hist')
runApp('C:/sandbox/r/tutorial/shiny/ui_tut_1')
runApp('C:/sandbox/r/tutorial/shiny/ui_tut_1')
runApp('C:/sandbox/r/tutorial/shiny/hist')
runApp('C:/sandbox/r/tutorial/shiny/hist')
setwd("C:/sandbox/r/tutorial/animated_graph")
